// Code generated by capnpc-go. DO NOT EDIT.

package llm

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Input capnp.Struct

// Input_TypeID is the unique identifier for the type Input.
const Input_TypeID = 0xe8f081dfc737de36

func NewInput(s *capnp.Segment) (Input, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Input(st), err
}

func NewRootInput(s *capnp.Segment) (Input, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Input(st), err
}

func ReadRootInput(msg *capnp.Message) (Input, error) {
	root, err := msg.Root()
	return Input(root.Struct()), err
}

func (s Input) String() string {
	str, _ := text.Marshal(0xe8f081dfc737de36, capnp.Struct(s))
	return str
}

func (s Input) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Input) DecodeFromPtr(p capnp.Ptr) Input {
	return Input(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Input) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Input) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Input) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Input) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Input) Mention() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Input) HasMention() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Input) MentionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Input) SetMention(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Input) Context() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Input) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Input) SetContext(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewContext sets the context field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Input) NewContext(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Input_List is a list of Input.
type Input_List = capnp.StructList[Input]

// NewInput creates a new list of Input.
func NewInput_List(s *capnp.Segment, sz int32) (Input_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Input](l), err
}

// Input_Future is a wrapper for a Input promised by a client call.
type Input_Future struct{ *capnp.Future }

func (f Input_Future) Struct() (Input, error) {
	p, err := f.Future.Ptr()
	return Input(p.Struct()), err
}

type LLM capnp.Client

// LLM_TypeID is the unique identifier for the type LLM.
const LLM_TypeID = 0xf0a772303ea27c44

func (c LLM) GenerateResponse(ctx context.Context, params func(LLM_generateResponse_Params) error) (LLM_generateResponse_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf0a772303ea27c44,
			MethodID:      0,
			InterfaceName: "llm.capnp:LLM",
			MethodName:    "generateResponse",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(LLM_generateResponse_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return LLM_generateResponse_Results_Future{Future: ans.Future()}, release

}

func (c LLM) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c LLM) String() string {
	return "LLM(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c LLM) AddRef() LLM {
	return LLM(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c LLM) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c LLM) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c LLM) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (LLM) DecodeFromPtr(p capnp.Ptr) LLM {
	return LLM(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c LLM) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c LLM) IsSame(other LLM) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c LLM) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c LLM) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A LLM_Server is a LLM with a local implementation.
type LLM_Server interface {
	GenerateResponse(context.Context, LLM_generateResponse) error
}

// LLM_NewServer creates a new Server from an implementation of LLM_Server.
func LLM_NewServer(s LLM_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(LLM_Methods(nil, s), s, c)
}

// LLM_ServerToClient creates a new Client from an implementation of LLM_Server.
// The caller is responsible for calling Release on the returned Client.
func LLM_ServerToClient(s LLM_Server) LLM {
	return LLM(capnp.NewClient(LLM_NewServer(s)))
}

// LLM_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func LLM_Methods(methods []server.Method, s LLM_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf0a772303ea27c44,
			MethodID:      0,
			InterfaceName: "llm.capnp:LLM",
			MethodName:    "generateResponse",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GenerateResponse(ctx, LLM_generateResponse{call})
		},
	})

	return methods
}

// LLM_generateResponse holds the state for a server call to LLM.generateResponse.
// See server.Call for documentation.
type LLM_generateResponse struct {
	*server.Call
}

// Args returns the call's arguments.
func (c LLM_generateResponse) Args() LLM_generateResponse_Params {
	return LLM_generateResponse_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c LLM_generateResponse) AllocResults() (LLM_generateResponse_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LLM_generateResponse_Results(r), err
}

// LLM_List is a list of LLM.
type LLM_List = capnp.CapList[LLM]

// NewLLM_List creates a new list of LLM.
func NewLLM_List(s *capnp.Segment, sz int32) (LLM_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[LLM](l), err
}

type LLM_generateResponse_Params capnp.Struct

// LLM_generateResponse_Params_TypeID is the unique identifier for the type LLM_generateResponse_Params.
const LLM_generateResponse_Params_TypeID = 0xd055f1fc11e0cd55

func NewLLM_generateResponse_Params(s *capnp.Segment) (LLM_generateResponse_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LLM_generateResponse_Params(st), err
}

func NewRootLLM_generateResponse_Params(s *capnp.Segment) (LLM_generateResponse_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LLM_generateResponse_Params(st), err
}

func ReadRootLLM_generateResponse_Params(msg *capnp.Message) (LLM_generateResponse_Params, error) {
	root, err := msg.Root()
	return LLM_generateResponse_Params(root.Struct()), err
}

func (s LLM_generateResponse_Params) String() string {
	str, _ := text.Marshal(0xd055f1fc11e0cd55, capnp.Struct(s))
	return str
}

func (s LLM_generateResponse_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LLM_generateResponse_Params) DecodeFromPtr(p capnp.Ptr) LLM_generateResponse_Params {
	return LLM_generateResponse_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LLM_generateResponse_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LLM_generateResponse_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LLM_generateResponse_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LLM_generateResponse_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LLM_generateResponse_Params) Input() (Input, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Input(p.Struct()), err
}

func (s LLM_generateResponse_Params) HasInput() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LLM_generateResponse_Params) SetInput(v Input) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInput sets the input field to a newly
// allocated Input struct, preferring placement in s's segment.
func (s LLM_generateResponse_Params) NewInput() (Input, error) {
	ss, err := NewInput(capnp.Struct(s).Segment())
	if err != nil {
		return Input{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// LLM_generateResponse_Params_List is a list of LLM_generateResponse_Params.
type LLM_generateResponse_Params_List = capnp.StructList[LLM_generateResponse_Params]

// NewLLM_generateResponse_Params creates a new list of LLM_generateResponse_Params.
func NewLLM_generateResponse_Params_List(s *capnp.Segment, sz int32) (LLM_generateResponse_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[LLM_generateResponse_Params](l), err
}

// LLM_generateResponse_Params_Future is a wrapper for a LLM_generateResponse_Params promised by a client call.
type LLM_generateResponse_Params_Future struct{ *capnp.Future }

func (f LLM_generateResponse_Params_Future) Struct() (LLM_generateResponse_Params, error) {
	p, err := f.Future.Ptr()
	return LLM_generateResponse_Params(p.Struct()), err
}
func (p LLM_generateResponse_Params_Future) Input() Input_Future {
	return Input_Future{Future: p.Future.Field(0, nil)}
}

type LLM_generateResponse_Results capnp.Struct

// LLM_generateResponse_Results_TypeID is the unique identifier for the type LLM_generateResponse_Results.
const LLM_generateResponse_Results_TypeID = 0xc73590e1b79863a6

func NewLLM_generateResponse_Results(s *capnp.Segment) (LLM_generateResponse_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LLM_generateResponse_Results(st), err
}

func NewRootLLM_generateResponse_Results(s *capnp.Segment) (LLM_generateResponse_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LLM_generateResponse_Results(st), err
}

func ReadRootLLM_generateResponse_Results(msg *capnp.Message) (LLM_generateResponse_Results, error) {
	root, err := msg.Root()
	return LLM_generateResponse_Results(root.Struct()), err
}

func (s LLM_generateResponse_Results) String() string {
	str, _ := text.Marshal(0xc73590e1b79863a6, capnp.Struct(s))
	return str
}

func (s LLM_generateResponse_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LLM_generateResponse_Results) DecodeFromPtr(p capnp.Ptr) LLM_generateResponse_Results {
	return LLM_generateResponse_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LLM_generateResponse_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LLM_generateResponse_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LLM_generateResponse_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LLM_generateResponse_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LLM_generateResponse_Results) Output() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s LLM_generateResponse_Results) HasOutput() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LLM_generateResponse_Results) OutputBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s LLM_generateResponse_Results) SetOutput(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// LLM_generateResponse_Results_List is a list of LLM_generateResponse_Results.
type LLM_generateResponse_Results_List = capnp.StructList[LLM_generateResponse_Results]

// NewLLM_generateResponse_Results creates a new list of LLM_generateResponse_Results.
func NewLLM_generateResponse_Results_List(s *capnp.Segment, sz int32) (LLM_generateResponse_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[LLM_generateResponse_Results](l), err
}

// LLM_generateResponse_Results_Future is a wrapper for a LLM_generateResponse_Results promised by a client call.
type LLM_generateResponse_Results_Future struct{ *capnp.Future }

func (f LLM_generateResponse_Results_Future) Struct() (LLM_generateResponse_Results, error) {
	p, err := f.Future.Ptr()
	return LLM_generateResponse_Results(p.Struct()), err
}

const schema_f641f3e21bc55b4e = "x\xda\x84\x91?\xab\xd3P\x18\xc6\x9f\xe7\x9c\xc4\\/" +
	"\xb7\xa5\x87\xdc\xcd\xa1\x0ewP\xd0R+U\xc8`\xab" +
	"\x14\xa4P%\xa7\xd0\xc9)\x94\x83\x14\xda$&)*" +
	"\x08EG'G\x1d\\\x1c\xf4#8:I'\xc1O" +
	"\xe0\xbf\xc9\xb1\"8\x09\x91D\xd2\xd6\xc9\xed\xf0\xf0;" +
	"\xbf\xf7}x\x1b\xef\xfa\xd6\xa5\xdaZ@\xe8\xb3\xf6\xa9" +
	"\xfc\xf5\xf4\xf9\xdb\xaf\xcf\xbak\xa8:\x01\x9b\x0epy" +
	"H\x8f\xa0\xab\xd9\x03\xf3\xc9\x87/\xea\xf7\x8f\xc9\xc7}" +
	"\xe0\x1e;\x05\xf0\xb0\x04\xae|\xba\xba\xfe\xfcx\xf3\x1d" +
	"\xea\x90\xf9\xed;\xef\xcf|\xfby\xfd\x17l\xe1\x00\xee" +
	"\x0b>q_\xf2\xef\xeb>\x98\x0f\x1e\xbd\xba\xd6N\xde" +
	"l\xa0\x0e\xe5\x8e\x05][$\xee\xe9\xf2\x8b-n\xba" +
	"]\xe1\xe0B>\x9f/Z\xd3 \x0ee\xec\x8dF\xb7" +
	"ZwMh\x92 3c\x93\xc6Q\x98\x9a\x93q\xcf" +
	"\xa4\xcby\x96jKZ\x80E@\xd5<@\x1fH\xea" +
	"c\xc1^\xb4\xcc\xe2e\xc6#\x08\x1e\x81\xff\xd5\xf9\xcd" +
	" \x09\x16\xff\xd8:;[s\x16\x16\xb2\xc6\xae.\xc8" +
	"\xc6\x9e\x96\xb17,\x10\xf8\xa4>\xd8:\xce\xdf\x00\xf4" +
	"\x89\xa4n\x0b*\xf2\x98Ex\xb1\x08\xcfI\xea\x81\xe0" +
	"ja\xc2l\x16\x85\xd5\x9e\xabi\x14f\xe6A\xc6:" +
	"\xe8K\x96q}o\x0e\x9a\xe5\xfe\xc5\x14K\xda\xc0\xf6" +
	"@\xacN\xa9\xd4S\x08Us\xf2\xaa\"\xab\x8e@\x9f" +
	">\xf9'\x00\x00\xff\xff\x9b\xd3\x87V"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_f641f3e21bc55b4e,
		Nodes: []uint64{
			0xc73590e1b79863a6,
			0xd055f1fc11e0cd55,
			0xe8f081dfc737de36,
			0xf0a772303ea27c44,
		},
		Compressed: true,
	})
}
