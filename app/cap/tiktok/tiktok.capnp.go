// Code generated by capnpc-go. DO NOT EDIT.

package tiktok

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type User capnp.Struct

// User_TypeID is the unique identifier for the type User.
const User_TypeID = 0xeb52f0469fccdeb7

func NewUser(s *capnp.Segment) (User, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return User(st), err
}

func NewRootUser(s *capnp.Segment) (User, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return User(st), err
}

func ReadRootUser(msg *capnp.Message) (User, error) {
	root, err := msg.Root()
	return User(root.Struct()), err
}

func (s User) String() string {
	str, _ := text.Marshal(0xeb52f0469fccdeb7, capnp.Struct(s))
	return str
}

func (s User) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (User) DecodeFromPtr(p capnp.Ptr) User {
	return User(capnp.Struct{}.DecodeFromPtr(p))
}

func (s User) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s User) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s User) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s User) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s User) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s User) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s User) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s User) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s User) Uid() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s User) HasUid() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s User) UidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s User) SetUid(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s User) Nickname() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s User) HasNickname() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s User) NicknameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s User) SetNickname(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// User_List is a list of User.
type User_List = capnp.StructList[User]

// NewUser creates a new list of User.
func NewUser_List(s *capnp.Segment, sz int32) (User_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[User](l), err
}

// User_Future is a wrapper for a User promised by a client call.
type User_Future struct{ *capnp.Future }

func (f User_Future) Struct() (User, error) {
	p, err := f.Future.Ptr()
	return User(p.Struct()), err
}

type Comment capnp.Struct

// Comment_TypeID is the unique identifier for the type Comment.
const Comment_TypeID = 0xb14c9b4fd22547c2

func NewComment(s *capnp.Segment) (Comment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Comment(st), err
}

func NewRootComment(s *capnp.Segment) (Comment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Comment(st), err
}

func ReadRootComment(msg *capnp.Message) (Comment, error) {
	root, err := msg.Root()
	return Comment(root.Struct()), err
}

func (s Comment) String() string {
	str, _ := text.Marshal(0xb14c9b4fd22547c2, capnp.Struct(s))
	return str
}

func (s Comment) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Comment) DecodeFromPtr(p capnp.Ptr) Comment {
	return Comment(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Comment) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Comment) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Comment) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Comment) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Comment) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Comment) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Comment) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Comment) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Comment) MediaId() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Comment) HasMediaId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Comment) MediaIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Comment) SetMediaId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Comment) Author() (User, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return User(p.Struct()), err
}

func (s Comment) HasAuthor() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Comment) SetAuthor(v User) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewAuthor sets the author field to a newly
// allocated User struct, preferring placement in s's segment.
func (s Comment) NewAuthor() (User, error) {
	ss, err := NewUser(capnp.Struct(s).Segment())
	if err != nil {
		return User{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Comment) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Comment) HasText() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Comment) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Comment) SetText(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Comment) Replies() (Comment_List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return Comment_List(p.List()), err
}

func (s Comment) HasReplies() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Comment) SetReplies(v Comment_List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewReplies sets the replies field to a newly
// allocated Comment_List, preferring placement in s's segment.
func (s Comment) NewReplies(n int32) (Comment_List, error) {
	l, err := NewComment_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Comment_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}

// Comment_List is a list of Comment.
type Comment_List = capnp.StructList[Comment]

// NewComment creates a new list of Comment.
func NewComment_List(s *capnp.Segment, sz int32) (Comment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return capnp.StructList[Comment](l), err
}

// Comment_Future is a wrapper for a Comment promised by a client call.
type Comment_Future struct{ *capnp.Future }

func (f Comment_Future) Struct() (Comment, error) {
	p, err := f.Future.Ptr()
	return Comment(p.Struct()), err
}
func (p Comment_Future) Author() User_Future {
	return User_Future{Future: p.Future.Field(2, nil)}
}

type TikTok capnp.Client

// TikTok_TypeID is the unique identifier for the type TikTok.
const TikTok_TypeID = 0xb61751eadcf2ee19

func (c TikTok) Mention(ctx context.Context, params func(TikTok_mention_Params) error) (TikTok_mention_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb61751eadcf2ee19,
			MethodID:      0,
			InterfaceName: "tiktok.capnp:TikTok",
			MethodName:    "mention",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TikTok_mention_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TikTok_mention_Results_Future{Future: ans.Future()}, release

}

func (c TikTok) Comments(ctx context.Context, params func(TikTok_comments_Params) error) (TikTok_comments_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb61751eadcf2ee19,
			MethodID:      1,
			InterfaceName: "tiktok.capnp:TikTok",
			MethodName:    "comments",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TikTok_comments_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TikTok_comments_Results_Future{Future: ans.Future()}, release

}

func (c TikTok) Reply(ctx context.Context, params func(TikTok_reply_Params) error) (TikTok_reply_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb61751eadcf2ee19,
			MethodID:      2,
			InterfaceName: "tiktok.capnp:TikTok",
			MethodName:    "reply",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TikTok_reply_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TikTok_reply_Results_Future{Future: ans.Future()}, release

}

func (c TikTok) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c TikTok) String() string {
	return "TikTok(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c TikTok) AddRef() TikTok {
	return TikTok(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c TikTok) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c TikTok) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c TikTok) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (TikTok) DecodeFromPtr(p capnp.Ptr) TikTok {
	return TikTok(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c TikTok) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c TikTok) IsSame(other TikTok) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c TikTok) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c TikTok) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A TikTok_Server is a TikTok with a local implementation.
type TikTok_Server interface {
	Mention(context.Context, TikTok_mention) error

	Comments(context.Context, TikTok_comments) error

	Reply(context.Context, TikTok_reply) error
}

// TikTok_NewServer creates a new Server from an implementation of TikTok_Server.
func TikTok_NewServer(s TikTok_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(TikTok_Methods(nil, s), s, c)
}

// TikTok_ServerToClient creates a new Client from an implementation of TikTok_Server.
// The caller is responsible for calling Release on the returned Client.
func TikTok_ServerToClient(s TikTok_Server) TikTok {
	return TikTok(capnp.NewClient(TikTok_NewServer(s)))
}

// TikTok_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func TikTok_Methods(methods []server.Method, s TikTok_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb61751eadcf2ee19,
			MethodID:      0,
			InterfaceName: "tiktok.capnp:TikTok",
			MethodName:    "mention",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Mention(ctx, TikTok_mention{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb61751eadcf2ee19,
			MethodID:      1,
			InterfaceName: "tiktok.capnp:TikTok",
			MethodName:    "comments",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Comments(ctx, TikTok_comments{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb61751eadcf2ee19,
			MethodID:      2,
			InterfaceName: "tiktok.capnp:TikTok",
			MethodName:    "reply",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Reply(ctx, TikTok_reply{call})
		},
	})

	return methods
}

// TikTok_mention holds the state for a server call to TikTok.mention.
// See server.Call for documentation.
type TikTok_mention struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TikTok_mention) Args() TikTok_mention_Params {
	return TikTok_mention_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TikTok_mention) AllocResults() (TikTok_mention_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TikTok_mention_Results(r), err
}

// TikTok_comments holds the state for a server call to TikTok.comments.
// See server.Call for documentation.
type TikTok_comments struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TikTok_comments) Args() TikTok_comments_Params {
	return TikTok_comments_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TikTok_comments) AllocResults() (TikTok_comments_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TikTok_comments_Results(r), err
}

// TikTok_reply holds the state for a server call to TikTok.reply.
// See server.Call for documentation.
type TikTok_reply struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TikTok_reply) Args() TikTok_reply_Params {
	return TikTok_reply_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TikTok_reply) AllocResults() (TikTok_reply_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TikTok_reply_Results(r), err
}

// TikTok_List is a list of TikTok.
type TikTok_List = capnp.CapList[TikTok]

// NewTikTok_List creates a new list of TikTok.
func NewTikTok_List(s *capnp.Segment, sz int32) (TikTok_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[TikTok](l), err
}

type TikTok_mention_Params capnp.Struct

// TikTok_mention_Params_TypeID is the unique identifier for the type TikTok_mention_Params.
const TikTok_mention_Params_TypeID = 0xbb0bedda65765ef0

func NewTikTok_mention_Params(s *capnp.Segment) (TikTok_mention_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TikTok_mention_Params(st), err
}

func NewRootTikTok_mention_Params(s *capnp.Segment) (TikTok_mention_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TikTok_mention_Params(st), err
}

func ReadRootTikTok_mention_Params(msg *capnp.Message) (TikTok_mention_Params, error) {
	root, err := msg.Root()
	return TikTok_mention_Params(root.Struct()), err
}

func (s TikTok_mention_Params) String() string {
	str, _ := text.Marshal(0xbb0bedda65765ef0, capnp.Struct(s))
	return str
}

func (s TikTok_mention_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TikTok_mention_Params) DecodeFromPtr(p capnp.Ptr) TikTok_mention_Params {
	return TikTok_mention_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TikTok_mention_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TikTok_mention_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TikTok_mention_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TikTok_mention_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TikTok_mention_Params_List is a list of TikTok_mention_Params.
type TikTok_mention_Params_List = capnp.StructList[TikTok_mention_Params]

// NewTikTok_mention_Params creates a new list of TikTok_mention_Params.
func NewTikTok_mention_Params_List(s *capnp.Segment, sz int32) (TikTok_mention_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TikTok_mention_Params](l), err
}

// TikTok_mention_Params_Future is a wrapper for a TikTok_mention_Params promised by a client call.
type TikTok_mention_Params_Future struct{ *capnp.Future }

func (f TikTok_mention_Params_Future) Struct() (TikTok_mention_Params, error) {
	p, err := f.Future.Ptr()
	return TikTok_mention_Params(p.Struct()), err
}

type TikTok_mention_Results capnp.Struct

// TikTok_mention_Results_TypeID is the unique identifier for the type TikTok_mention_Results.
const TikTok_mention_Results_TypeID = 0xa65a4e044f9f760f

func NewTikTok_mention_Results(s *capnp.Segment) (TikTok_mention_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TikTok_mention_Results(st), err
}

func NewRootTikTok_mention_Results(s *capnp.Segment) (TikTok_mention_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TikTok_mention_Results(st), err
}

func ReadRootTikTok_mention_Results(msg *capnp.Message) (TikTok_mention_Results, error) {
	root, err := msg.Root()
	return TikTok_mention_Results(root.Struct()), err
}

func (s TikTok_mention_Results) String() string {
	str, _ := text.Marshal(0xa65a4e044f9f760f, capnp.Struct(s))
	return str
}

func (s TikTok_mention_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TikTok_mention_Results) DecodeFromPtr(p capnp.Ptr) TikTok_mention_Results {
	return TikTok_mention_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TikTok_mention_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TikTok_mention_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TikTok_mention_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TikTok_mention_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TikTok_mention_Results) Comment() (Comment, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Comment(p.Struct()), err
}

func (s TikTok_mention_Results) HasComment() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TikTok_mention_Results) SetComment(v Comment) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewComment sets the comment field to a newly
// allocated Comment struct, preferring placement in s's segment.
func (s TikTok_mention_Results) NewComment() (Comment, error) {
	ss, err := NewComment(capnp.Struct(s).Segment())
	if err != nil {
		return Comment{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// TikTok_mention_Results_List is a list of TikTok_mention_Results.
type TikTok_mention_Results_List = capnp.StructList[TikTok_mention_Results]

// NewTikTok_mention_Results creates a new list of TikTok_mention_Results.
func NewTikTok_mention_Results_List(s *capnp.Segment, sz int32) (TikTok_mention_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TikTok_mention_Results](l), err
}

// TikTok_mention_Results_Future is a wrapper for a TikTok_mention_Results promised by a client call.
type TikTok_mention_Results_Future struct{ *capnp.Future }

func (f TikTok_mention_Results_Future) Struct() (TikTok_mention_Results, error) {
	p, err := f.Future.Ptr()
	return TikTok_mention_Results(p.Struct()), err
}
func (p TikTok_mention_Results_Future) Comment() Comment_Future {
	return Comment_Future{Future: p.Future.Field(0, nil)}
}

type TikTok_comments_Params capnp.Struct

// TikTok_comments_Params_TypeID is the unique identifier for the type TikTok_comments_Params.
const TikTok_comments_Params_TypeID = 0xcd9a6f69958d1fd1

func NewTikTok_comments_Params(s *capnp.Segment) (TikTok_comments_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TikTok_comments_Params(st), err
}

func NewRootTikTok_comments_Params(s *capnp.Segment) (TikTok_comments_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TikTok_comments_Params(st), err
}

func ReadRootTikTok_comments_Params(msg *capnp.Message) (TikTok_comments_Params, error) {
	root, err := msg.Root()
	return TikTok_comments_Params(root.Struct()), err
}

func (s TikTok_comments_Params) String() string {
	str, _ := text.Marshal(0xcd9a6f69958d1fd1, capnp.Struct(s))
	return str
}

func (s TikTok_comments_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TikTok_comments_Params) DecodeFromPtr(p capnp.Ptr) TikTok_comments_Params {
	return TikTok_comments_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TikTok_comments_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TikTok_comments_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TikTok_comments_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TikTok_comments_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TikTok_comments_Params) MediaId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TikTok_comments_Params) HasMediaId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TikTok_comments_Params) MediaIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TikTok_comments_Params) SetMediaId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// TikTok_comments_Params_List is a list of TikTok_comments_Params.
type TikTok_comments_Params_List = capnp.StructList[TikTok_comments_Params]

// NewTikTok_comments_Params creates a new list of TikTok_comments_Params.
func NewTikTok_comments_Params_List(s *capnp.Segment, sz int32) (TikTok_comments_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TikTok_comments_Params](l), err
}

// TikTok_comments_Params_Future is a wrapper for a TikTok_comments_Params promised by a client call.
type TikTok_comments_Params_Future struct{ *capnp.Future }

func (f TikTok_comments_Params_Future) Struct() (TikTok_comments_Params, error) {
	p, err := f.Future.Ptr()
	return TikTok_comments_Params(p.Struct()), err
}

type TikTok_comments_Results capnp.Struct

// TikTok_comments_Results_TypeID is the unique identifier for the type TikTok_comments_Results.
const TikTok_comments_Results_TypeID = 0xa63ee95a95524b06

func NewTikTok_comments_Results(s *capnp.Segment) (TikTok_comments_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TikTok_comments_Results(st), err
}

func NewRootTikTok_comments_Results(s *capnp.Segment) (TikTok_comments_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TikTok_comments_Results(st), err
}

func ReadRootTikTok_comments_Results(msg *capnp.Message) (TikTok_comments_Results, error) {
	root, err := msg.Root()
	return TikTok_comments_Results(root.Struct()), err
}

func (s TikTok_comments_Results) String() string {
	str, _ := text.Marshal(0xa63ee95a95524b06, capnp.Struct(s))
	return str
}

func (s TikTok_comments_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TikTok_comments_Results) DecodeFromPtr(p capnp.Ptr) TikTok_comments_Results {
	return TikTok_comments_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TikTok_comments_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TikTok_comments_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TikTok_comments_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TikTok_comments_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TikTok_comments_Results) Comments() (Comment_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Comment_List(p.List()), err
}

func (s TikTok_comments_Results) HasComments() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TikTok_comments_Results) SetComments(v Comment_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewComments sets the comments field to a newly
// allocated Comment_List, preferring placement in s's segment.
func (s TikTok_comments_Results) NewComments(n int32) (Comment_List, error) {
	l, err := NewComment_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Comment_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TikTok_comments_Results_List is a list of TikTok_comments_Results.
type TikTok_comments_Results_List = capnp.StructList[TikTok_comments_Results]

// NewTikTok_comments_Results creates a new list of TikTok_comments_Results.
func NewTikTok_comments_Results_List(s *capnp.Segment, sz int32) (TikTok_comments_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TikTok_comments_Results](l), err
}

// TikTok_comments_Results_Future is a wrapper for a TikTok_comments_Results promised by a client call.
type TikTok_comments_Results_Future struct{ *capnp.Future }

func (f TikTok_comments_Results_Future) Struct() (TikTok_comments_Results, error) {
	p, err := f.Future.Ptr()
	return TikTok_comments_Results(p.Struct()), err
}

type TikTok_reply_Params capnp.Struct

// TikTok_reply_Params_TypeID is the unique identifier for the type TikTok_reply_Params.
const TikTok_reply_Params_TypeID = 0xa4dfd63ed6456c60

func NewTikTok_reply_Params(s *capnp.Segment) (TikTok_reply_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return TikTok_reply_Params(st), err
}

func NewRootTikTok_reply_Params(s *capnp.Segment) (TikTok_reply_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return TikTok_reply_Params(st), err
}

func ReadRootTikTok_reply_Params(msg *capnp.Message) (TikTok_reply_Params, error) {
	root, err := msg.Root()
	return TikTok_reply_Params(root.Struct()), err
}

func (s TikTok_reply_Params) String() string {
	str, _ := text.Marshal(0xa4dfd63ed6456c60, capnp.Struct(s))
	return str
}

func (s TikTok_reply_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TikTok_reply_Params) DecodeFromPtr(p capnp.Ptr) TikTok_reply_Params {
	return TikTok_reply_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TikTok_reply_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TikTok_reply_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TikTok_reply_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TikTok_reply_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TikTok_reply_Params) MediaId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TikTok_reply_Params) HasMediaId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TikTok_reply_Params) MediaIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TikTok_reply_Params) SetMediaId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s TikTok_reply_Params) CommendId() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s TikTok_reply_Params) HasCommendId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TikTok_reply_Params) CommendIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s TikTok_reply_Params) SetCommendId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s TikTok_reply_Params) Response() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s TikTok_reply_Params) HasResponse() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s TikTok_reply_Params) ResponseBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s TikTok_reply_Params) SetResponse(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// TikTok_reply_Params_List is a list of TikTok_reply_Params.
type TikTok_reply_Params_List = capnp.StructList[TikTok_reply_Params]

// NewTikTok_reply_Params creates a new list of TikTok_reply_Params.
func NewTikTok_reply_Params_List(s *capnp.Segment, sz int32) (TikTok_reply_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[TikTok_reply_Params](l), err
}

// TikTok_reply_Params_Future is a wrapper for a TikTok_reply_Params promised by a client call.
type TikTok_reply_Params_Future struct{ *capnp.Future }

func (f TikTok_reply_Params_Future) Struct() (TikTok_reply_Params, error) {
	p, err := f.Future.Ptr()
	return TikTok_reply_Params(p.Struct()), err
}

type TikTok_reply_Results capnp.Struct

// TikTok_reply_Results_TypeID is the unique identifier for the type TikTok_reply_Results.
const TikTok_reply_Results_TypeID = 0x98e486f48f58747e

func NewTikTok_reply_Results(s *capnp.Segment) (TikTok_reply_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TikTok_reply_Results(st), err
}

func NewRootTikTok_reply_Results(s *capnp.Segment) (TikTok_reply_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TikTok_reply_Results(st), err
}

func ReadRootTikTok_reply_Results(msg *capnp.Message) (TikTok_reply_Results, error) {
	root, err := msg.Root()
	return TikTok_reply_Results(root.Struct()), err
}

func (s TikTok_reply_Results) String() string {
	str, _ := text.Marshal(0x98e486f48f58747e, capnp.Struct(s))
	return str
}

func (s TikTok_reply_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TikTok_reply_Results) DecodeFromPtr(p capnp.Ptr) TikTok_reply_Results {
	return TikTok_reply_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TikTok_reply_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TikTok_reply_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TikTok_reply_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TikTok_reply_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TikTok_reply_Results_List is a list of TikTok_reply_Results.
type TikTok_reply_Results_List = capnp.StructList[TikTok_reply_Results]

// NewTikTok_reply_Results creates a new list of TikTok_reply_Results.
func NewTikTok_reply_Results_List(s *capnp.Segment, sz int32) (TikTok_reply_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TikTok_reply_Results](l), err
}

// TikTok_reply_Results_Future is a wrapper for a TikTok_reply_Results promised by a client call.
type TikTok_reply_Results_Future struct{ *capnp.Future }

func (f TikTok_reply_Results_Future) Struct() (TikTok_reply_Results, error) {
	p, err := f.Future.Ptr()
	return TikTok_reply_Results(p.Struct()), err
}

const schema_fe4bf44cd2322767 = "x\xda\x84SAh\x13[\x14\xbd\xf7\xbd\x97\xce\xe7\xff" +
	"\xe4\xa7\xcf\x89H\x0bR,\x16\xa5`\xb1\xd5\x8d\x05\xdb" +
	"X\x8d\xda6\xda\xbc\x10\xa1\x14\x11\x87v\xd0!\x99L" +
	"\xc8LJ\x055\x0aU*X\x14\xa1 \xba(Hu" +
	"\xe1\xa6\xb8\xa8\"\xd2\x8d\x08nta\x17]\x88\xe8\xc6" +
	"\x8d\x8aR\xa5\x1b7\x8e\xbc\xa4\x99LB\xb5\xbb\xe1\xcd" +
	"\xb9\xf7\x9e{\xce\xb9\xbb_`\x94u\x86\x8a\x0c\x88\xd8" +
	"\x1bhp/:\xc37V\xaf~\xbc\x0d<\x82\x00L" +
	"\x01\xd8\xd3F6!0\xf7t&\xb6\xdc\xb3\xfca\xae" +
	"\xfc'@\xe5\xaf\x10\xf9\x17\x01\xd5\xcdd\x1e\xd0m\x18" +
	"L\xce\x8c|\xeay\xb0\x06@\x09X \xed\x12\xb0H" +
	"z\x01\xdd\xf0\xf8\xec\x10;>R\x03\xf8NZ%\xe0" +
	"g\x09\xf0\xfcH\xdb\xd2\xd0\xdd\xf8#\xe0!t\xcf\xec" +
	"\xe8Z\x8a\xaf\x0e\xfe\x82@@\x01P\x9b\xe8Cu[" +
	"i\xe8V\xda\x82\x80n\xd3\xb7\x1f\xef>\x8b-\x8f\x81" +
	"\x87h\x15\x0c\xa8\xeeg\xf7\xd4\x98d\xae\x1e`/\xd5" +
	"E\xf9\xe5\xae\x9c\x1a\xd7\xdf~\xfd\xef\x99o\xad\xfb\xac" +
	"Y\xae\xf5\xa6ez\xc6\xb0\xee\xbc\xf6\x93\x9af%R" +
	"3L\x92z\xf2\xfe\xd5\xec\xe1\x95\xe4\x97:R\x92\x8a" +
	"\xba\xc0n\x95\x07\xa8O\xd9<\xecr\x1d#\xedX\xe9" +
	"\x8eQ\xaa\xe5\xb2\xb9\xee\x94\x91NY\xe9\x8e\xbc\x9e\xcb" +
	"\x9c\xdb\x9e\xd4\xedB\xc6A\xfbo\x98\x84\x96\xd7L\x1b" +
	"@\x04)\x03`\x08\xc0c}\x00\"JQ\xc4\x09r" +
	"\xc4\x08\xca\xc7\xfe$\x808JQ\xa4\x08rB\"H" +
	"\x00\xb8\x18\x00\x10\x09\x8a\xe2$\xc1\xa2\xa9\x8f\x19Z\xff" +
	"\x18\x06\x81`\x10\xd0\x1d\xb5LS\xcf\x8e\xf5\x03V\xdf" +
	"\xf2\xba\x9d\xb3\xb2\xb6\x0e\x00\xde\xdb\xba\xe4\xca\xc5\x8e-" +
	"w\x08\x172\x8e-\x98\xc7/4P\xa2\x8bb'\xa9" +
	"Lql\xd9\xf1\x7f\xc0\x04El\xac\x9a\x0a(\x1f\xd7" +
	"\x1f!\xcb\x0c+[RI\xa9\x9b \x15\xf8\x87\xa2\x88" +
	"\x10,\xaeM\xa8k\xdb\xe8k\x8b\xa5\xb6\x07-3," +
	"\x81\x09D\x11\xf1Z]h\x06\x10\x13\x14\xc5\xa4O\xcc" +
	"\xcb\xb2\xffy\x8ab\xca'\xe6\x95n\x00q\x89\xa2\xb8" +
	"N\x90S\x1aA\x0a\xc0\xaf\xb5\x03\x88I\x8a\xe2&A" +
	"\xceX\x04\x19\x00\x9f\x96\xe5S\x14\xc5\x1cAjx\xea" +
	"\xd6;\xd0\xab\x15\x9c\xb3V\x1e\x1b\xaby*\x13\x0f;" +
	"\xfa\x84\xe3U\xc9\x1c\x18\xba\xbd\xb1zXQOIY" +
	"i\xb9e\x90\x06|9\xc7\xca\xadq\xd1\x07\x84\xc7\x14" +
	"D/\xe9X9T\xbeo\x00\x08\xefT\x90x\xc7\x8d" +
	"\x95\xfb\xe7m]@x\x93R\\s&Z\xe3n\x14" +
	"[J\x89\x8db\x027pTf\x9a\x9a\xf6\x06\xc9J" +
	"hyE3\xffh{}\x9ckU8a\xeb\x98/" +
	"k\xe0\x9dM\xf3zg\xd3\x0a \x0eQ\x14\x09\x9f\xd3" +
	"\xc7d\x80\xe3\x14\xc5p\x8d\x7fJ\xa1\xfa\xedf\x8d\xd1" +
	"tV3\xfd\x97\xf2;\x00\x00\xff\xffs&N\x8e"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_fe4bf44cd2322767,
		Nodes: []uint64{
			0x98e486f48f58747e,
			0xa4dfd63ed6456c60,
			0xa63ee95a95524b06,
			0xa65a4e044f9f760f,
			0xb14c9b4fd22547c2,
			0xb61751eadcf2ee19,
			0xbb0bedda65765ef0,
			0xcd9a6f69958d1fd1,
			0xeb52f0469fccdeb7,
		},
		Compressed: true,
	})
}
